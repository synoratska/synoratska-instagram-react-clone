{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","text","e","target","value","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","files","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","password","setPassword","email","setEmail","setUser","onAuthStateChanged","authUser","id","post","className","Modal","onClose","style","src","alt","Input","placeholder","type","onChange","Button","onClick","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAaMA,EAXcC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,YACjBC,EAAOX,IAASW,OAChBC,EAAUZ,IAASY,UCyFVC,MAjGf,YAA6D,IAA7CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAAY,EACzBC,mBAAS,IADgB,mBAClDC,EADkD,KACxCC,EADwC,OAE3BF,mBAAS,IAFkB,mBAElDG,EAFkD,KAEzCC,EAFyC,KAmCzD,OA/BAC,qBAAU,WACN,IAAIC,EAWJ,OAVIX,IACAW,EAAc1B,EACT2B,WAAW,SACXC,IAAIb,GACJY,WAAW,YACXE,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACTT,EAAYS,EAASC,KAAKC,KAAI,SAACL,GAAD,OAASA,EAAIM,eAGhD,WACHR,OAEL,CAACX,IAiBA,yBAAK,UAAU,QACX,yBAAK,UAAU,gBAEX,kBAAC,IAAD,CACI,UAAU,eACV,IAAI,eACJ,IAAI,+BAEZ,gCAAME,EAAN,MASA,yBACI,UAAU,cACV,IAAKE,EACL,IAAI,KAGZ,wBAAI,UAAU,cACV,oCAAUF,GADd,IACkCC,GAElC,yBAAK,UAAU,kBACVG,EAASY,KAAI,SAACV,GAAD,OACV,2BACI,gCAASA,EAAQN,UADrB,IACyCM,EAAQY,UAKpDnB,GACG,0BAAM,UAAU,oBACZ,2BACI,UAAU,cACV,KAAK,OACL,YAAY,mBACZ,MAAOO,EACP,SAAU,SAACa,GAAD,OAAOZ,EAAWY,EAAEC,OAAOC,UAEzC,4BACI,UAAU,eACV,UAAWf,EACX,KAAK,SACL,QA9DA,SAACgB,GACjBA,EAAMC,iBAENxC,EAAG2B,WAAW,SACTC,IAAIb,GACJY,WAAW,YACXc,IAAI,CACDN,KAAMZ,EACNN,SAAUD,EAAK0B,YACfC,UAAW1C,YAAmB2C,WAAWC,oBAEjDrB,EAAW,MA+CC,W,sCCNLsB,MAzEf,YAAiC,IAAX7B,EAAW,EAAXA,SAAW,EACHG,mBAAS,MADN,mBACtB2B,EADsB,KACfC,EADe,OAEG5B,mBAAS,GAFZ,mBAEtB6B,EAFsB,KAEZC,EAFY,OAGC9B,mBAAS,IAHV,mBAGtBF,EAHsB,KAGbiC,EAHa,KAmD7B,OACI,yBAAK,UAAU,eACX,8BACI,UAAU,wBACV,MAAOF,EACP,IAAI,QACR,2BAAO,KAAK,OACL,YAAY,qBACZ,SAAU,SAAAV,GAAK,OAAIY,EAAWZ,EAAMF,OAAOC,QAC3C,MAAOpB,IAEd,2BACI,KAAK,OACL,SA3DS,SAACkB,GACdA,EAAEC,OAAOe,MAAM,IACfJ,EAASZ,EAAEC,OAAOe,MAAM,OA0DxB,kBAAC,IAAD,CAAQ,QAtDK,WACEvC,EAAQwC,IAAR,iBAAsBN,EAAMO,OAC1CC,IAAIR,GAEES,GACP,iBACA,SAACzB,GAED,IAAMkB,EAAWQ,KAAKC,MACjB3B,EAAS4B,iBAAmB5B,EAAS6B,WAAc,KAEpDV,EAAYD,MAEhB,SAACY,GAEGC,QAAQC,IAAIF,GACZG,MAAMH,EAAMI,YAEhB,WAEIpD,EACKwC,IAAI,UACJa,MAAMnB,EAAMO,MACZa,iBACAC,MAAK,SAAAC,GAEFrE,EAAG2B,WAAW,SAASc,IAAI,CACvBE,UAAW1C,YAAmB2C,WAAWC,kBACzC3B,QAASA,EACTC,SAAUkD,EACVpD,SAAUA,IAEdiC,EAAY,GACZC,EAAW,IACXH,EAAS,cAoBrB,Y,QC7DZ,SAASsB,IAIL,MAAO,CACHC,IAAI,GAAD,OAJK,GAIL,KACHC,KAAK,GAAD,OAJK,GAIL,KACJC,UAAU,cAAD,OAND,GAMC,eALA,GAKA,OAIjB,IAAMC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWR,EAAMS,QAAQ,GACzBC,QAASV,EAAMW,QAAQ,EAAG,EAAG,QA+MtBC,MA3Mf,WACI,IAAMC,EAAUf,IADL,EAEUtD,mBAASkD,GAAvBoB,EAFI,sBAGetE,mBAAS,IAHxB,mBAGJuE,EAHI,KAGGC,EAHH,OAIaxE,oBAAS,GAJtB,mBAIJyE,EAJI,KAIEC,EAJF,OAKyB1E,oBAAS,GALlC,mBAKJ2E,EALI,KAKQC,EALR,OAMqB5E,mBAAS,IAN9B,mBAMJH,EANI,KAMMgF,EANN,OAOqB7E,mBAAS,IAP9B,mBAOJ8E,EAPI,KAOMC,EAPN,OAQe/E,mBAAS,IARxB,mBAQJgF,EARI,KAQGC,EARH,OASajF,mBAAS,MATtB,mBASJJ,EATI,KASEsF,EATF,KAkEb,OAvDE7E,qBAAU,WACN,IAAMC,EAAcd,EAAK2F,oBAAmB,SAACC,GACrCA,GAEA1C,QAAQC,IAAIyC,GACZF,EAAQE,IAIVF,EAAQ,SAId,OAAM,WAEF5E,OAEL,CAACV,EAAMC,IAEVQ,qBAAU,WACVzB,EAAG2B,WAAW,SACTE,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACZ6D,EAAS7D,EAASC,KAAKC,KAAI,SAAAL,GAAG,MAAK,CAC/B6E,GAAI7E,EAAI6E,GACRC,KAAM9E,EAAIM,iBAGnB,IA4BC,yBAAKyE,UAAU,OAEX,kBAACC,EAAA,EAAD,CACIf,KAAMA,EACNgB,QAAS,kBAAMf,GAAQ,KAEvB,yBACIgB,MAAOpB,EACPiB,UAAWlB,EAAQZ,OACnB,0BAAM8B,UAAU,eACT,yBACIA,UAAU,0BACVI,IAAI,2EACJC,IAAI,KAEP,kBAACC,EAAA,EAAD,CACIC,YAAY,WACZC,KAAK,OACL7E,MAAOrB,EACPmG,SAAU,SAAChF,GAAD,OAAO6D,EAAY7D,EAAEC,OAAOC,UAE3C,kBAAC2E,EAAA,EAAD,CACIC,YAAY,QACZC,KAAK,OACL7E,MAAO8D,EACPgB,SAAU,SAAChF,GAAD,OAAOiE,EAASjE,EAAEC,OAAOC,UAEvC,kBAAC2E,EAAA,EAAD,CACIC,YAAY,WACZC,KAAK,WACL7E,MAAO4D,EACPkB,SAAU,SAAChF,GAAD,OAAO+D,EAAY/D,EAAEC,OAAOC,UAE9C,kBAAC+E,EAAA,EAAD,CAAQF,KAAK,SAASG,QA3DtB,SAAC/E,GACZA,EAAMC,iBAEN5B,EACK2G,+BAA+BnB,EAAOF,GACtC9B,MAAK,SAACoC,GACH,OAAOA,EAASxF,KAAKwG,cAAc,CAC/B9E,YAAazB,OAGpBwG,OAAM,SAAC5D,GAAD,OAAWG,MAAMH,EAAMI,YAE9B6B,GAAQ,KA+CD,cAMX,kBAACc,EAAA,EAAD,CACIf,KAAME,EACNc,QAAS,kBAAMb,GAAc,KAE7B,yBACIc,MAAOpB,EACPiB,UAAWlB,EAAQZ,OACnB,0BAAM8B,UAAU,eACZ,yBACIA,UAAU,mBACVI,IAAI,2EACJC,IAAI,KAGR,kBAACC,EAAA,EAAD,CACIC,YAAY,QACZC,KAAK,OACL7E,MAAO8D,EACPgB,SAAU,SAAChF,GAAD,OAAOiE,EAASjE,EAAEC,OAAOC,UAEvC,kBAAC2E,EAAA,EAAD,CACIC,YAAY,WACZC,KAAK,WACL7E,MAAO4D,EACPkB,SAAU,SAAChF,GAAD,OAAO+D,EAAY/D,EAAEC,OAAOC,UAE1C,kBAAC+E,EAAA,EAAD,CAAQF,KAAK,SAASG,QA5EvB,SAAC/E,GACZA,EAAMC,iBAEN5B,EACK8G,2BAA2BtB,EAAOF,GAClCuB,OAAM,SAAC5D,GAAD,OAAWG,MAAMH,EAAMI,YAElC+B,GAAc,KAqEF,cAMd,yBAAKW,UAAU,eACb,yBACIA,UAAU,mBACVI,IAAI,wFACJC,IAAI,SAELhG,EACG,kBAACqG,EAAA,EAAD,CAAQC,QAAS,kBAAM1G,EAAK+G,YAA5B,UAEA,yBAAKhB,UAAU,uBACX,kBAACU,EAAA,EAAD,CAAQC,QAAS,kBAAMtB,GAAc,KAArC,WACA,kBAACqB,EAAA,EAAD,CAAQC,QAAS,kBAAMxB,GAAQ,KAA/B,aAKV,yBAAKa,UAAU,cACX,yBAAKA,UAAU,kBAEPhB,EAAM1D,KAAI,gBAAEwE,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAN,OACN,kBAAC,EAAD,CACIkB,IAAKnB,EACL1F,OAAQ0F,EACRzF,KAAMA,EACNC,SAAUyF,EAAKzF,SACfC,QAASwF,EAAKxF,QACdC,SAAUuF,EAAKvF,eAM/B,yBAAKwF,UAAU,mBACX,kBAAC,IAAD,CACItC,IAAI,2CACJwD,SAAU,IACVC,aAAa,EACbC,iBAAiB,MACjBC,SAAS,GACTC,cAAY,EACZC,UAAW,aACXC,UAAW,aACXC,cAAe,aACfC,UAAW,kBAWlB,OAAJrH,QAAI,IAAJA,OAAA,EAAAA,EAAM0B,aACH,kBAAC,EAAD,CAAazB,SAAUD,EAAK0B,cAG5B,oECzNQ4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEd3B,OAAM,SAAA5D,GACLC,QAAQD,MAAMA,EAAMI,c","file":"static/js/main.6c61bec6.chunk.js","sourcesContent":["import firebase from \"firebase\"\r\rconst firebaseApp = firebase.initializeApp({\r    apiKey: \"AIzaSyAzqZfYRjist1GLnW7CwMwxWMX93r-7UYQ\",\r    authDomain: \"react-instagram-dc8a3.firebaseapp.com\",\r    databaseURL: \"https://react-instagram-dc8a3.firebaseio.com\",\r    projectId: \"react-instagram-dc8a3\",\r    storageBucket: \"react-instagram-dc8a3.appspot.com\",\r    messagingSenderId: \"171591726801\",\r    appId: \"1:171591726801:web:d122c22cb959f2372eb7f0\",\r    measurementId: \"G-3QFP0T5R5H\"\r})\r\rconst db = firebaseApp.firestore()\rconst auth = firebase.auth()\rconst storage = firebase.storage()\r\rexport { db, auth, storage }\r\r// export default db","import React, {useEffect, useState} from 'react'\rimport './Post.css'\rimport Avatar from \"@material-ui/core/Avatar\"\rimport {db} from \"./firebase\";\rimport * as firebase from \"firebase\";\r\r\rfunction Post({ postId, user, username, caption, imageUrl }) {\r    const [comments, setComments] = useState([])\r    const [comment, setComment] = useState('')\r\r    useEffect(() => {\r        let unsubscribe\r        if (postId) {\r            unsubscribe = db\r                .collection('posts')\r                .doc(postId)\r                .collection('comments')\r                .orderBy('timestamp', 'desc')\r                .onSnapshot((snapshot) => {\r                    setComments(snapshot.docs.map((doc) => doc.data()))\r                })\r        }\r        return () => {\r            unsubscribe()\r        }\r    }, [postId])\r\r    const postComment = (event) => {\r        event.preventDefault()\r\r        db.collection(\"posts\")\r            .doc(postId)\r            .collection(\"comments\")\r            .add({\r                text: comment,\r                username: user.displayName,\r                timestamp: firebase.firestore.FieldValue.serverTimestamp()\r            })\r        setComment('')\r    }\r\r    return (\r        <div className=\"post\">\r            <div className=\"post__header\">\r\r                <Avatar\r                    className=\"post__avatar\"\r                    alt='m.synoratska'\r                    src=\"/static/image/avatar/1.jpg\"\r                />\r            <h3> {username} </h3>\r            </div>\r\r        {/* header => avatar + username */}\r\r\r\r\r        {/* image */}\r            <img\r                className=\"post__image\"\r                src={imageUrl}\r                alt=\"\"/>\r\r        {/* username + caption */}\r        <h4 className=\"post__text\">\r            <strong> {username}</strong> {caption}</h4>\r\r        <div className=\"post__comments\">\r            {comments.map((comment) => (\r                <p>\r                    <strong>{comment.username}</strong> {comment.text}\r                </p>\r            ))}\r        </div>\r\r            {user && (\r                <form className=\"post__commentBox\">\r                    <input\r                        className=\"post__input\"\r                        type=\"text\"\r                        placeholder=\"Add a comment...\"\r                        value={comment}\r                        onChange={(e) => setComment(e.target.value)}\r                    />\r                    <button\r                        className=\"post__button\"\r                        disabled={!comment}\r                        type=\"submit\"\r                        onClick={postComment}\r                    >\r                        Post\r                    </button>\r\r                </form>\r            )}\r\r\r\r        </div>\r    )\r}\r\rexport default Post","import React, {useState} from 'react'\rimport { Button } from \"@material-ui/core\";\rimport { storage, db } from \"./firebase\";\rimport * as firebase from \"firebase\";\rimport './imageUpload.css'\r\r\rfunction ImageUpload({username}) {\r    const [image, setImage] = useState(null)\r    const [progress, setProgress] = useState(0)\r    const [caption, setCaption] = useState('')\r\r    const handleChange = (e) => {\r        if (e.target.files[0]) {\r            setImage(e.target.files[0])\r        }\r}\r\r    const handleUpload = () => {\r        const uploadTask = storage.ref(`images/${image.name}`)\r            .put(image);\r\r        uploadTask.on(\r            \"state_changed\",\r            (snapshot) => {\r        //        progress function\r            const progress = Math.round(\r                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r            )\r                setProgress(progress)\r            },\r            (error) => {\r            //    Error function\r                console.log(error);\r                alert(error.message)\r            },\r            () => {\r            //    complete function\r                storage\r                    .ref(\"images\")\r                    .child(image.name)\r                    .getDownloadURL()\r                    .then(url => {\r                    //    post image inside db\r                        db.collection(\"posts\").add({\r                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r                            caption: caption,\r                            imageUrl: url,\r                            username: username\r                        })\r                        setProgress(0)\r                        setCaption('')\r                        setImage(null)\r                    })\r                })\r\r    }\r\r    return (\r        <div className=\"imageupload\">\r            <progress\r                className=\"imageupload__progress\"\r                value={progress}\r                max=\"100\" />\r            <input type=\"text\"\r                   placeholder='Enter a caption...'\r                   onChange={event => setCaption(event.target.value)}\r                   value={caption}\r            />\r            <input\r                type=\"file\"\r                onChange={handleChange} />\r            <Button onClick={handleUpload}>\r                Upload\r            </Button>\r\r        </div>\r    )\r}\r\rexport default ImageUpload","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Post from './Post'\nimport { db, auth } from './firebase'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Button, Input } from \"@material-ui/core\";\nimport ImageUpload from \"./ImageUpload\";\nimport InstagramEmbed from 'react-instagram-embed'\n\n\nfunction getModalStyle() {\n    const top = 50;\n    const left = 50;\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nfunction App() {\n    const classes = useStyles()\n    const [modalStyle] = useState(getModalStyle)\n    const [posts, setPosts] = useState([])\n    const [open, setOpen] = useState(false)\n    const [openSignIn, setOpenSignIn] = useState(false)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [email, setEmail] = useState('')\n    const [user, setUser] = useState(null)\n\n    useEffect(() => {\n        const unsubscribe = auth.onAuthStateChanged((authUser) => {\n            if (authUser) {\n                // user has logged in\n                console.log(authUser);\n                setUser(authUser)\n\n            } else {\n                // user has logged out\n              setUser(null)\n            }\n        })\n\n        return() => {\n            //perform some cleanup actions\n            unsubscribe()\n        }\n    }, [user, username])\n\n    useEffect(() => {\n    db.collection(\"posts\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot(snapshot => {\n        setPosts(snapshot.docs.map(doc => ({\n            id: doc.id,\n            post: doc.data()\n        })))\n    })\n}, [])\n\n    const signUp = (event) => {\n        event.preventDefault()\n\n        auth\n            .createUserWithEmailAndPassword(email, password)\n            .then((authUser) => {\n                return authUser.user.updateProfile({\n                    displayName: username\n                })\n            })\n            .catch((error) => alert(error.message))\n\n            setOpen(false)\n        }\n\n    const signIn = (event) => {\n        event.preventDefault()\n\n        auth\n            .signInWithEmailAndPassword(email, password)\n            .catch((error) => alert(error.message))\n\n        setOpenSignIn(false)\n        }\n\n  return (\n    <div className=\"app\">\n\n        <Modal\n            open={open}\n            onClose={() => setOpen(false)}\n        >\n            <div\n                style={modalStyle}\n                className={classes.paper}>\n                <form className=\"app__signup\">\n                       <img\n                           className=\"app__headerImage center\"\n                           src=\"https://pngimage.net/wp-content/uploads/2018/06/font-instagram-png-2.png\"\n                           alt=\"\"\n                       />\n                        <Input\n                            placeholder=\"username\"\n                            type=\"text\"\n                            value={username}\n                            onChange={(e) => setUsername(e.target.value)}\n                        />\n                       <Input\n                           placeholder=\"email\"\n                           type=\"text\"\n                           value={email}\n                           onChange={(e) => setEmail(e.target.value)}\n                       />\n                       <Input\n                           placeholder=\"password\"\n                           type=\"password\"\n                           value={password}\n                           onChange={(e) => setPassword(e.target.value)}\n                       />\n                   <Button type=\"submit\" onClick={signUp}>Sign Up</Button>\n                </form>\n            </div>\n\n        </Modal>\n\n        <Modal\n            open={openSignIn}\n            onClose={() => setOpenSignIn(false)}\n        >\n            <div\n                style={modalStyle}\n                className={classes.paper}>\n                <form className=\"app__signup\">\n                    <img\n                        className=\"app__headerImage\"\n                        src=\"https://pngimage.net/wp-content/uploads/2018/06/font-instagram-png-2.png\"\n                        alt=\"\"\n                    />\n\n                    <Input\n                        placeholder=\"email\"\n                        type=\"text\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                    <Input\n                        placeholder=\"password\"\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <Button type=\"submit\" onClick={signIn}>Sign In</Button>\n                </form>\n            </div>\n\n        </Modal>\n    {/*Header*/}\n      <div className=\"app__header\">\n        <img\n            className=\"app__headerImage\"\n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n            alt=\"logo\"\n        />\n          {user? (\n              <Button onClick={() => auth.signOut()}>Logout</Button>\n          ): (\n              <div className=\"app__loginContainer\">\n                  <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n                  <Button onClick={() => setOpen(true)}>Sign Up</Button>\n              </div>\n          )}\n      </div>\n\n        <div className=\"app__posts\">\n            <div className=\"app__postsLeft\">\n                {\n                    posts.map(({id, post}) => (\n                        <Post\n                            key={id}\n                            postId={id}\n                            user={user}\n                            username={post.username}\n                            caption={post.caption}\n                            imageUrl={post.imageUrl}\n                        />\n                    ))\n                }\n            </div>\n\n            <div className=\"app__postsRight\">\n                <InstagramEmbed\n                    url='https://www.instagram.com/p/CEbtKw9HbDH/'\n                    maxWidth={320}\n                    hideCaption={false}\n                    containerTagName='div'\n                    protocol=''\n                    injectScript\n                    onLoading={() => {}}\n                    onSuccess={() => {}}\n                    onAfterRender={() => {}}\n                    onFailure={() => {}}\n                />\n            </div>\n\n\n        </div>\n\n\n\n\n\n        {user?.displayName ? (\n            <ImageUpload username={user.displayName} />\n\n        ): (\n            <h3>Sorry, you need to login to upload</h3>\n        )}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}